{
  "createdAt": "2025-05-23T10:05:28.892Z",
  "updatedAt": "2025-06-05T13:49:29.000Z",
  "id": "qqPofSEKswPVvYfv",
  "name": "Emailing sequence",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "fromEmail": "\"DAGDA Consulting\" <gilles.hanotel@dagdaconsulting.fr>",
        "toEmail": "={{ $json.emailProspect }}",
        "subject": "Un partenariat local gagnant-gagnant pour vos clients",
        "html": "={{ $json.data }}",
        "options": {
          "appendAttribution": false,
          "replyTo": "gilles.hanotel@dagdaconsulting.fr"
        }
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        1380,
        -580
      ],
      "id": "30631a65-053a-47aa-819a-beffa5d6dd0e",
      "name": "Send Email",
      "webhookId": "6516cea2-d227-430b-868e-565a370e7f5f",
      "credentials": {
        "smtp": {
          "id": "OCcMFTbzJ3Q4jkW3",
          "name": "SMTP gilles.hanotel@dagdaconsulting.fr"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let date = new Date(); \nlet daysToAdd = 3;\nlet added = 0;\n\nwhile (added < daysToAdd) {\n  date.setDate(date.getDate() + 1);\n  // 0 = dimanche, 6 = samedi\n  if (date.getDay() !== 0 && date.getDay() !== 6) {\n    added++;\n  }\n}\n\n// Format ISO pour Notion (exemple : 2025-05-29T00:00:00.000Z)\nconst notionDate = date.toISOString();\n\nreturn { \n    id: $('Markdown').item.json.idPageNotion,\n    seq: $('Markdown').item.json.sequence,\n    nextdate: notionDate \n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1600,
        -580
      ],
      "id": "64903bb0-6ad3-4b76-887c-df075d5f669c",
      "name": "Add 3 days from now"
    },
    {
      "parameters": {
        "mode": "markdownToHtml",
        "markdown": "={{ $json.content }}",
        "options": {
          "emoji": true,
          "simpleLineBreaks": true,
          "tables": true
        }
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        1160,
        -580
      ],
      "id": "97a8b412-78ea-44e7-8d99-e1c77ee7f922",
      "name": "Markdown"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 10
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -140,
        -480
      ],
      "id": "7f8ac4fb-0415-40e0-8fa6-20523da5f392",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "1fc0e4a6-9b58-80b7-b6d9-d03c8e3a321f",
          "mode": "list",
          "cachedResultName": "Prospects DAGDA",
          "cachedResultUrl": "https://www.notion.so/1fc0e4a69b5880b7b6d9d03c8e3a321f"
        },
        "returnAll": true,
        "filterType": "manual",
        "filters": {
          "conditions": [
            {
              "key": "Next Date|date",
              "condition": "on_or_before",
              "date": "={{ $now.toISOString().split(\"T\")[0] }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        80,
        -480
      ],
      "id": "07f589a5-e887-4d11-ad5d-aec6b22cee1b",
      "name": "Get Prospects",
      "credentials": {
        "notionApi": {
          "id": "f291e1a9rwjBTHf6",
          "name": "Notion Fandango"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "id",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        300,
        -480
      ],
      "id": "16b2024c-38be-40cf-8102-b0a280b2a825",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// 1) On récupère les propriétés du prospect\nconst scenario   = $json.property_sc_nario;    // ex. \"ssii\"\nconst sequence   = $json.property_s_quence;    // ex. 1\nconst fileName   = `${scenario}_${sequence}`;\nconst notionPageId = $json.id;\n\n// 2) Construire l'URL WebDAV vers Nextcloud\n//    Attention : adapter \"https://nextcloud.mondomaine.com/remote.php/webdav/templates/\"\nconst webdavBase = \"/WebSites/Dagda_Consulting/Prospection/Templates/\";                 \nconst templateURL = `${webdavBase}${fileName}.md`;\n\n// 3) Générer l'URL de tracking pour ce prospect\n//    → On va pointer vers un Webhook n8n qu’on créera plus bas.\n//    Bien penser à remplacer \"votre-n8n.mondomaine.com\" par le domaine réel (ou IP) de votre instance n8n.\n//    On encodera notionPageId et sequence en query params.\nconst trackingUrl = `https://n8n.dagdaconsulting.fr/webhook/dagda_track-open?Id=${encodeURIComponent(notionPageId)}&seq=${sequence}`;\n\n// 3) On renvoie ces infos pour les nœuds suivants\nreturn {\n  json: {\n    idPageNotion: $json[\"id\"],    // nécessaire pour la mise à jour ultérieure\n    scenario: scenario,\n    sequence: sequence,\n    emailProspect: $json.property_e_mail,\n    civilite: $json.property_civilit,\n    prenom: $json.property_pr_nom,\n    nom: $json.property_nom,\n    urlTemplate: templateURL,\n    fileName: fileName,\n    trackingUrl: trackingUrl\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        520,
        -480
      ],
      "id": "38ba9834-25e1-4507-a605-6c4363d2e54f",
      "name": "DataSet"
    },
    {
      "parameters": {
        "operation": "download",
        "path": "={{ $json.urlTemplate }}"
      },
      "type": "n8n-nodes-base.nextCloud",
      "typeVersion": 1,
      "position": [
        740,
        -480
      ],
      "id": "8fb79433-1a40-4925-b5b3-7d5370443006",
      "name": "Download Template",
      "alwaysOutputData": false,
      "executeOnce": false,
      "credentials": {
        "nextCloudApi": {
          "id": "IVa79bi5ZUmWlMFe",
          "name": "NextCloud data.c-g-h.net"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Étant en “Run Once for Each Item”,\n// on a directement accès à la variable `item`,\n// qui combine désormais :\n//  • item.json.{id, nom, prenom, email, …}  (venant de “Get Prospects”)\n//  • item.binary.data.{fileName, directory, fileExtension, mimeType, fileSize, data} \n//    (venant du nœud Nextcloud).\n\n// 1) Récupérer l’objet binaire “data” (émanant de Nextcloud)\nconst bin           = item.binary.data;\n\n// 2) Dans cet objet binaire, la propriété `bin.data` contient la chaîne Base64 du .txt\nconst base64String  = bin.data;\n\n// 3) Décoder le Base64 en UTF-8 → on obtient le “texte brut” du template\nconst texteBrut     = Buffer.from(base64String, 'base64').toString('utf8');\n\n// 4) Faire une passe de remplacement pour chaque placeholder {clé}.\n//    Ex. : si le fichier contient “Bonjour {prenom} {nom},”, on veut remplacer {prenom} et {nom}.\n//    On utilise une RegExp globale /\\{(\\w+)\\}/g :\n//      • (\\w+) capture “une suite de lettres/chiffres/_” qui est le nom de la variable (ex “prenom”).\n//      • fullMatch = la totalité de la chaîne (“{prenom}”), varName = “prenom”.\nconst texteRemplace = texteBrut.replace(/\\{(\\w+)\\}/g, (fullMatch, varName) => {\n  // Si item.json[varName] existe, on remplace par cette valeur.\n  // Sinon on laisse fullMatch (c.-à-d. “{varName}”), pratique pour repérer un placeholder non défini.\n  return item.json[varName] !== undefined\n    ? item.json[varName]\n    : fullMatch;\n});\n\n// 5) En sortie, on renvoie UN SEUL objet { json: { … } }.\n//    On recopie toutes les clés JSON qui étaient présentes (id, nom, prenom, email, …).\n//    Puis on ajoute un nouveau champ `content` qui contient le texte final.\nreturn {\n  json: {\n    // Tout le JSON du prospect (par ex. { id:1, nom:\"Dupont\", prenom:\"Jean\", email:\"jean.dupont@example.com\" })\n    ...item.json,\n    // + on ajoute notre texte transformé\n    content: texteRemplace,\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        940,
        -580
      ],
      "id": "fe9bdca4-5bd3-4169-96f4-e8ab3b65c279",
      "name": "Adapt Template"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Next Date|date",
              "includeTime": false,
              "date": "={{ $json.nextdate }}"
            },
            {
              "key": "Séquence|number",
              "numberValue": "={{ $json.seq +1}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        1820,
        -580
      ],
      "id": "84de9fd1-9fb3-431d-9cad-5fa745ab0125",
      "name": "Notion",
      "credentials": {
        "notionApi": {
          "id": "f291e1a9rwjBTHf6",
          "name": "Notion Fandango"
        }
      }
    },
    {
      "parameters": {
        "path": "dagda_track-open",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -140,
        -240
      ],
      "id": "9c667d38-583a-4e36-a40d-e5d741f58868",
      "name": "dagda_track_open",
      "webhookId": "e6898fc7-29f0-4a94-ab88-c9c13dea19b6"
    },
    {
      "parameters": {
        "jsCode": "// 1) Récupérer notionId depuis la query string\n//    Webhook met les query params dans $json[\"query\"] (ou directement $json[\"query\"][\"notionId\"])\nconst queryParams = $json[\"query\"] || {};\nconst notionId = queryParams[\"Id\"];\n\n// 2) Récupérer la date/heure courante dans le fuseau Europe/Paris\n//    n8n exécute en UTC, on veut stocker en ISO (YYYY-MM-DDTHH:mm:ssZ)\nconst nowIso = new Date().toISOString();\n\n// 3) Préparer le payload pour Notion Update\nreturn [{\n  json: {\n    notionPageId: notionId,\n    dateOuverture: nowIso\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        -240
      ],
      "id": "172ec0b5-2386-4a4a-999e-2777bd9254dc",
      "name": "ParseQuery"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "value": "={{ $json.notionPageId }}",
          "mode": "id"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Ouverture|date",
              "date": "={{ $json.dateOuverture }}",
              "timezone": "Europe/Paris"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        300,
        -240
      ],
      "id": "776baba6-bf7a-41ac-9945-55782c5ae766",
      "name": "UpdateOpeningDate",
      "credentials": {
        "notionApi": {
          "id": "f291e1a9rwjBTHf6",
          "name": "Notion Fandango"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Base64 d'un PNG transparent 1×1\nconst base64Pixel = \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGMAAQAABQABDQottAAAAABJRU5ErkJggg==\";\n// On convertit en buffer binaire\nconst buffer = Buffer.from(base64Pixel, \"base64\");\n\n// On doit renvoyer sous la forme d'un fichier binaire pour le Respond node\nreturn [\n  {\n    binary: {\n      data: {\n        data: buffer,\n        mimeType: \"image/png\",\n        fileName: \"pixel.png\"\n      }\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        520,
        -240
      ],
      "id": "b1e6b3ee-63cf-4fb8-9f51-4f6b8075842c",
      "name": "GeneratePixel"
    },
    {
      "parameters": {
        "respondWith": "binary",
        "responseDataSource": "set",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        740,
        -240
      ],
      "id": "e52a9129-4b47-4530-9bc5-215126a425d2",
      "name": "Respond to Webhook"
    }
  ],
  "connections": {
    "Send Email": {
      "main": [
        [
          {
            "node": "Add 3 days from now",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add 3 days from now": {
      "main": [
        [
          {
            "node": "Notion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Markdown": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Prospects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Prospects": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "DataSet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DataSet": {
      "main": [
        [
          {
            "node": "Download Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Template": {
      "main": [
        [
          {
            "node": "Adapt Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Adapt Template": {
      "main": [
        [
          {
            "node": "Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "dagda_track_open": {
      "main": [
        [
          {
            "node": "ParseQuery",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ParseQuery": {
      "main": [
        [
          {
            "node": "UpdateOpeningDate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "UpdateOpeningDate": {
      "main": [
        [
          {
            "node": "GeneratePixel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GeneratePixel": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "timezone": "Europe/Paris",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "33131006-60a6-4401-a606-f117279baeba",
  "triggerCount": 2,
  "shared": [
    {
      "createdAt": "2025-05-23T10:05:28.938Z",
      "updatedAt": "2025-05-23T10:05:28.938Z",
      "role": "workflow:owner",
      "workflowId": "qqPofSEKswPVvYfv",
      "projectId": "Izndf5GBoM9xJxqQ"
    }
  ],
  "tags": [
    {
      "createdAt": "2025-05-23T10:32:19.651Z",
      "updatedAt": "2025-05-23T10:32:19.651Z",
      "id": "3y7Gowr75o89CFLl",
      "name": "notion"
    },
    {
      "createdAt": "2025-05-23T10:32:25.379Z",
      "updatedAt": "2025-05-23T10:32:25.379Z",
      "id": "O6N6l951FPKf1qAr",
      "name": "smtp"
    }
  ]
}